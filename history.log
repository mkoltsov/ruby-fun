ruby -e "puts 123"

print 123
"Hello".reverse
irb --simple-prompt
ri upcase
ri String#upcase
ri Object#inspect
"123".class
200.next
332.323.class
f=44.0
2323.5.round
2323.5.to_i
2323.5.ceil
"Hello"
'hello'
'hello' + ' ' + "dsds"

'1'*5
'I\ 'm escaped.'
puts '\ta\tb\nc\nd'
"\ta\tb\nc\nd"
puts "the number is #{val}"
.reverse
.capitalize
.upcase
.downcase
.length
.reverse.upcase.length
data_set=[1,2,3]
data_set2=[]
data_set[2]
data_set << "e" = (append)
data_set[0]=nil
.clear
= []
= nil - assigns a new pointer
[].inspect
[].to_s
[].join(",")
[].split(",")
[].sort
[].uniq
[].uniq!
[].delete_at(0)
[].delete(4)
[].push(3)
[].pop(3)
[].shift
[].unshift(1)
[1]+[2]
[1]-[2]
person={"pupa"=>"dupa", "dupa"=>"pupa"}
person["pupa"]
person.index("pupa")
{}.keys
{}.values
{}.length
{}.size
{}.to_a
{}.clear
:test_this
:test_this.object_id
[1,2].empty?
[1,2].include?(3)
2.between?(1,4)
{}.has_key(:dupa)
{}.has_value(:dupa)
x=1..10
(1..10).class
.begin
.end
.first
.last
x.include?(10)
x=1..10
alpha='a'..m
alpha.include?('b')
[*alpha]
z=[*x]
Hello=1 - const

if x<10

elsif x>20

else

end

puts "this is me" if name=="me"

require 'irb/completion'

unless boolean

end

case value

when boolean

when boolean

else

end

boolean ? code1:code2

puts x==1 ? "one":"two"

x=y||z

x||=y

loop do

end

break;next;redo;retry

while boolean
end

until boolean
end

x=0
loop do
	break if x>=20
	x+=2
	puts x
end

puts x+=2 while x<100 

5.times do
	puts "Hello"	
end

1.upto(5){puts "Hello"}	
5.downto(1){puts "Hello"}	
(1..5).each{puts "Hello"}	

1.upto(5) do |i|
	puts "Hello" + i.to_s
end

fr = ["1","2"]
fr.each do |num|	
	puts fruit.capitalize
end

for fruit in fr
	puts fruit.capitalize
end

1.times
.upto
.downto
.step

(1..5).each		
.step

"Hello".each
.each_line
.each_byte

[].each
.each_index
.each_with_index

{}.each
.each_key
.each_value
.each_pair

5.times {puts "Hello"}
1.upto(5) {|i| puts "Hello" + i.to_s}

array=[1,2,3]

array.each{|num| puts num+2}

(1..10).find{|i| i==5}
(1..10).find{|i| i%3==0}
(1..10).detect{|i| (1..10).include?(i*3)}

(1..10).find_all{|i| i%30==0}
(1..10).select{|i| (1..10).include?(i*3)}
(1..10).any? {|i| i%3==0}
(1..10).all {|i| i%3==0}
[*1..10].delete_if{|i| i%3==0}

m1={"pupa"=>"chef", "dupa"=>123}
m2={"pupa"=>"123", "dupa"=>321}
m1.merge(m2)
m1.merge(m2){|key, old,new| old}
m1.merge(m2){|k, o,n| o<n ? o:n}
m1.merge!(m2){|k, o,n| o<n ? o:n}

array.map do |num|
?> if num%2==0
>>  num+100
>> else
?>  num
>> end
end

map={"pupa"=>"dupa", "dupa"=>"pupa"}
map.map{|k,v| k}

map.map{|k,v| "#{k}:#{v}"}

1 <=> 2
2 <=> 2

arr=[3,4,6,7,3,1,2]
arr.sort{|v1,v2| v1<=> v2}
arr.sort{|v1,v2| v2<=> v1}
.sort
.reverse
arr.sort_by{|i| i}
map.to_a
map.sort {|item1, item2| item1[1] <=> item2[1]}
(1..10).inject{|memo, n| memo+n}
(1..10).inject(100){|memo, n| memo+n}
(1..10).inject(100){|memo, n| puts memo+n; memo}
fruits=["apple", "pear", "banana", "plum"]

longest_word=fruits.inject do |memo, fruit|
if memo.length>fruit.length
     memo
else
     fruit
end
 end

def some_name

end 

def welcome
    puts "Hello world"
 end

 def over_3?(age)
 	if age>3
 		true
 	else
 	    false
 	end
end 	    	
