ruby -e "puts 123"

print 123
"Hello".reverse
irb --simple-prompt
ri upcase
ri String#upcase
ri Object#inspect
"123".class
200.next
332.323.class
f=44.0
2323.5.round
2323.5.to_i
2323.5.ceil
"Hello"
'hello'
'hello' + ' ' + "dsds"

'1'*5
'I\ 'm escaped.'
puts '\ta\tb\nc\nd'
"\ta\tb\nc\nd"
puts "the number is #{val}"
.reverse
.capitalize
.upcase
.downcase
.length
.reverse.upcase.length
data_set=[1,2,3]
data_set2=[]
data_set[2]
data_set << "e" = (append)
data_set[0]=nil
.clear
= []
= nil - assigns a new pointer
[].inspect
[].to_s
[].join(",")
[].split(",")
[].sort
[].uniq
[].uniq!
[].delete_at(0)
[].delete(4)
[].push(3)
[].pop(3)
[].shift
[].unshift(1)
[1]+[2]
[1]-[2]
person={"pupa"=>"dupa", "dupa"=>"pupa"}
person["pupa"]
person.index("pupa")
{}.keys
{}.values
{}.length
{}.size
{}.to_a
{}.clear
:test_this
:test_this.object_id
[1,2].empty?
[1,2].include?(3)
2.between?(1,4)
{}.has_key(:dupa)
{}.has_value(:dupa)
x=1..10
(1..10).class
.begin
.end
.first
.last
x.include?(10)
x=1..10
alpha='a'..m
alpha.include?('b')
[*alpha]
z=[*x]
Hello=1 - const

if x<10

elsif x>20

else

end

puts "this is me" if name=="me"

require 'irb/completion'

unless boolean

end

case value

when boolean

when boolean

else

end

boolean ? code1:code2

puts x==1 ? "one":"two"

x=y||z

x||=y

loop do

end

break;next;redo;retry

while boolean
end

until boolean
end

x=0
loop do
	break if x>=20
	x+=2
	puts x
end

puts x+=2 while x<100 

5.times do
	puts "Hello"	
end

1.upto(5){puts "Hello"}	
5.downto(1){puts "Hello"}	
(1..5).each{puts "Hello"}	

1.upto(5) do |i|
	puts "Hello" + i.to_s
end

fr = ["1","2"]
fr.each do |num|	
	puts fruit.capitalize
end

for fruit in fr
	puts fruit.capitalize
end

1.times
.upto
.downto
.step

(1..5).each		
.step

"Hello".each
.each_line
.each_byte

[].each
.each_index
.each_with_index

{}.each
.each_key
.each_value
.each_pair

5.times {puts "Hello"}
1.upto(5) {|i| puts "Hello" + i.to_s}

array=[1,2,3]

array.each{|num| puts num+2}

(1..10).find{|i| i==5}
(1..10).find{|i| i%3==0}
(1..10).detect{|i| (1..10).include?(i*3)}

(1..10).find_all{|i| i%30==0}
(1..10).select{|i| (1..10).include?(i*3)}
(1..10).any? {|i| i%3==0}
(1..10).all {|i| i%3==0}
[*1..10].delete_if{|i| i%3==0}

m1={"pupa"=>"chef", "dupa"=>123}
m2={"pupa"=>"123", "dupa"=>321}
m1.merge(m2)
m1.merge(m2){|key, old,new| old}
m1.merge(m2){|k, o,n| o<n ? o:n}
m1.merge!(m2){|k, o,n| o<n ? o:n}

array.map do |num|
?> if num%2==0
>>  num+100
>> else
?>  num

map={"pupa"=>"dupa", "dupa"=>"pupa"}
>> end
end
map.map{|k,v| k}

map.map{|k,v| "#{k}:#{v}"}

1 <=> 2
2 <=> 2

arr=[3,4,6,7,3,1,2]
arr.sort{|v1,v2| v1<=> v2}
arr.sort{|v1,v2| v2<=> v1}
.sort
.reverse
arr.sort_by{|i| i}
map.to_a
map.sort {|item1, item2| item1[1] <=> item2[1]}
(1..10).inject{|memo, n| memo+n}
(1..10).inject(100){|memo, n| memo+n}
(1..10).inject(100){|memo, n| puts memo+n; memo}
fruits=["apple", "pear", "banana", "plum"]

longest_word=fruits.inject do |memo, fruit|
if memo.length>fruit.length
     memo
else
     fruit
end
 end

def some_name

end 

def welcome
    puts "Hello world"
 end

 def over_3?(age)
 	if age>3
 		true
 	else
 	    false
 	end
end  

class SomeName
	def set_noise
		@noise="Moo"
	end

	def makeNoise
		@noise
	end	

end

name=SomeName.new	    	

name.makeNose

module Romantic
	class Date
	end
end

dinner=Romantic::Date.new
dinner.date=Date.new

input=gets	
input.chomp
.chop

File.join("lib", "file.rb")
File.expand_path(__FILE__)
File.dirname(__FILE__)

file=File.new('irb_testfile.txt', 'w')
file.close

File.open('file.txt','r') do |file|
	//closes automatically
end

file=File.new("test.txt", "w")

file.puts "abc"

file.print "111"

file.write "abc"
file << "mnop"


file=File.new('irb_testfile.txt', 'r')
file.gets

File.open('File.txt', 'r') do |file|
	while line= file.gets
		puts "** " + line.chomp.reverse + " **"
	end
end

File.open('file1.txt', 'r') do |file|
	file.each_line {|line| puts line.upcase}	
end

File.delete
File.rename
require 'fileutils'
Fileutils.copy

File.exists?
.file?
.directory?
readable
writable?
executable?
.size
full_path=.expand_path
.basename
.extname
mtime
atime

Dir.pwd

.chdir
.entries

Dir.entries('.').each do |endtyr|

@first_name - instance variable
@@name - class variable(static)
surname - local variable
$LAST_NAME - global variable

ruby -cw c2f.rb - syntax check

irb --simple-prompt -rrbconfig

RbConfig::CONFIG["bindir"]

 ruby -e "puts $:"

 require "./loadee.rb" -> $: << "."; require "loadee.rb"

 rake --tasks

 rake clean_tmp

  rake admin:clean:tmp

  gem "hoe", "3.8.0"

  p Object.new.methods.sort

ri Object#respond_to\?
  .object_id

obj = Object.new
if obj.respond_to?("talk")
  obj.talk
else
  puts "Sorry, the object doesn't understand the 'talk' message."
end

def obj.multi_args(*x)
  puts "I can take zero or more arguments!"
end

def two_or_more(a,b,*c)
  puts "I require two or more arguments!"
  puts "And sure enough, I got: "
  p a, b, c
end

def default_args(a,b,c=1)
  puts "Values of variables: ",a,b,c
end

d="Hello"
a=d.dup
b=d.freeze
c=d.clone

Time.new.strftime("%m-%d-%y")

puts "at #{client.time["iso"]} my BTC balance: #{client.account("d61d3fe9-09ea-5633-a5a7-af6445c2f82c")["native_balance"]["amount"]}, sell price: #{client.sell_price({currency_pair: 'BTC-EUR'})["amount"]}, buy price: #{client.buy_price({currency_pair: 'BTC-EUR'})["amount"]}"


c = Class.new do
  def say_hello
    puts "Hello!"
  end
end

def Ticket.most_expensive(*tickets)
  tickets.max_by(&:price)
end

class Temperature
  def Temperature.c2f(celsius)
    celsius * 9.0 / 5 + 32
  end

  def Temperature.f2c(fahrenheit)
    (fahrenheit - 32) * 5 / 9.0
  end
end

Temperature::c2f(30)

Temperature.c2f(30)

class SomeInstance
	VENUES=["some", "more", "of that"]
end

puts SomeInstance::VENUES

puts RUBY_VERSION
puts RUBY_RELEASE_DATE

SomeInstance::VENUES << "dupa"

module StackLike
	def stack
		@stack||=[]
	end

	def add_to_stack(obj)
		stack.push(obj)
	end

	def take_from_stack(obj)
		stack.pop
	end
end

fake= -> {puts "111"}

fake.call

module MeFirst
  def report
    puts "Hello from module!"
  end
end

class Person
  prepend MeFirst
  def report
    puts "Hello from class!"
  end
end


p = Person.new
p.report

class Hey 
	def method_missing(m, *args)
		puts "instance method #{m} is missing"
	end

	def self.method_missing(m, *args)
		puts "class method #{m} is missing"
	end

	def Hey.method_missing(m, *args)
		puts "static method #{m} is missing"
		super
	end
end

module Tools
  class Hammer
  end
end

h = Tools::Hammer.new

obj = Object.new
def obj.show_me
  puts "Inside singleton method show_me of #{self}"
end

require "English"

puts $PID
puts $LOAD_PATH

::String.new()

def talk
  puts "Hello"
end

class Object
  private

  def talk
    puts "Hello"
  end
end

ruby -e 'p Kernel.private_instance_methods.sort'

if true 
	puts 111
end

if true then
	puts 111
end

if true; puts 222; end

if not x==1

if (!x)==1

unless x==1

puts "Big number!" if x > 100
puts "Big number!" unless x <= 100

case answer
when "y", "yes"
	puts "Good Bye!"
	exit 		
when "no"
	puts "Let's continue"	
end	

n = 1
begin
  puts n
  n = n + 1
end while n < 11
puts "Done!"

n = 1
while n < 11
  puts n
  n = n + 1
end
puts "Done!"

n = 1
loop





	 do
  n = n + 1
  next unless n == 10
  break
end

n = 1
loop do
  n = n + 1
  break if n > 9
end

n = 1
until n > 10
  puts n
  n = n + 1
end

n = 1
n = n + 1 until n == 10
puts "We've reached 10!"

c=[1,2,3]

for a in c 
	puts "#{a}"
end

def my_loop
  while true
    yield
  end
end

def my_loop
  yield while true
end

loop { puts "Looping forever!" }	

my_loop { puts "My-looping forever!" }

class Integer
  def my_times
    c = 0
    until c == self
      yield(c)
      c += 1
    end
    self
  end
end

5.my_times {|i| puts "I'm on iteration #{i}!" }

class Array
  def my_each
    size.my_times do |i|
      yield self[i]
    end
    self
  end
end

class Array
  # Put the definition of my_each here
  def my_map
    acc = []
    my_each {|e| acc << yield(e) }
    acc
  end
end

def block_args_unleashed
  yield(1,2,3,4,5)
end

block_args_unleashed do |a,b=1,*c,d,e|
  puts "Arguments:"
  p a,b,c,d,e
end

def block_local_variable
  x = "Original x!"
  3.times do |i;x|
    x = i
    puts "x in the block is now #{x}"
  end
  puts "x after the block ended is #{x}"
end

print "Enter a number: "
n = gets.to_i
begin
  result = 100 / n
rescue
  puts "Your number didn't work. Was it zero???"
  exit
end

def fussy_method(x)
  raise ArgumentError, "I need a number under 10" unless x < 10
end
fussy_method(20)

begin
  fussy_method(20)
rescue ArgumentError
  puts "That was not an acceptable number!"
end

raise "Problem!"

raise RuntimeError, "Problem!"
raise "Problem!"
raise RuntimeError, "Problem!"

begin 
  raise ArgumentError=>e
p e.class
end

begin
  fh = File.open(filename)

rescue => e
  logfile.puts("User tried to open #{filename}, #{Time.now}")
  logfile.puts("Exception: #{e.message}")
  raise
end


def line_from_file(filename, substring)
  fh = File.open(filename)
  begin
    line = fh.gets
    raise ArgumentError unless line.include?(substring)
  rescue ArgumentError
    puts "Invalid line!"
    raise
  ensure
    fh.close
  end
  return line
end

class MyNewException < Exception
end
raise MyNewException, "some new kind of error has occurred!"


class MyNewException < Exception
end
begin
  puts "About to raise exception..."
  raise MyNewException
rescue MyNewException => e
  puts "Just raised an exception: #{e}"
end

class InvalidLineError < StandardError
end
def line_from_file(filename, substring)
  fh = File.open(filename)
  line = fh.gets
  raise InvalidLineError unless line.include?(substring)
  return line

  rescue InvalidLineError
    puts "Invalid line!"
    raise
  ensure
    fh.close
end